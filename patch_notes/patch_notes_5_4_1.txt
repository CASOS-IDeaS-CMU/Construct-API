dynet::convert was case sensitive when converting strings to booleans. "True" and "False" now are correctly converted without exception.
Nodeset::add_node and Nodeset::add_nodes have now been given an optional argument whether to print when a node is added (default false). When construct->verbose_initialization is set to false, adding nodes will no longer print.
Consolidated the clunky system in Social_Media_no_followers for adding events. Various function have been added to handle users wanting to manually add events. In addition, copy and move constructors have been removed and a moved from copy constructor and assignment operator has been added. This will prevent issues created from copying or moving events.
Social_Media_no_followers::update_feeds now calls a new virtual function Social_Media_no_followers::get_feed_priority. Social_Media_no_followers::update_feeds will now use this function to sort events into groups and allows developers to tweak how events are sorted without having to recreate the feed generation process.
dynet::csv_too_many_cols now also takes a row number as a constructor argument. When the exception is thrown, it adds the row index to the return of std::exception::what
dynet::could_not_convert now also takes the string of the value that couldn't be converted as a constructor argument. When the exception is thrown, it adds that string to the return of std::exception::what
Social_Media_no_followers now takes as a model parameter "agent mask" which should point to a csv file containt a two column matrix with the first column being a string corresponding to an "author_id" in a submitted json file, and the second column indicating which agent corresponds to this "author_id". This parameter is only used when loading a json file using the model parameter "file name".
Output_dynetml contained a bug where timeperiods were not being parsed correctly.
Added a float argument to Social_Media_no_followers::update_feeds which allows for control over which timestamps should be added to users feeds.
The KnowledgeParsing model has been removed and instead a new type of class has been created. The InteractionMessageParser class is a base class that is used to handle central parsing of information when multiple models may want that information parsed. Knowledge_Parser now handles the parsing of knowledge and InteractionMessageParsers are called before any other model. 
Moved from constructor and assignment operators have been added to InteractionItem and InteractionMessage which to allow for faster methods of adding InteractionItems and InteractionMessages to data structures.
Fixed a bug where agent trust would decrease if their corresponding transactive memory was empty.
