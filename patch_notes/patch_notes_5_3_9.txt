Added sparse and dense macros so that its more obvious when using Graph_Manager::load_optional what the densities of the any created Graphs will be.
Modified the template parameter for Graph to make return types clearer.
Added function to get columns or rows of a Graph, return can be either a vector or a map.
Added a Transpose struct to Graph that wraps the Graph pointer as well as the T function which returns the this pointer wrapped in the Transpose struct.
Added a function to create a Temporary_Graph. This class contains a graph pointer. The class can be copied or moved, but the graph pointer is the original is discarded. When deallocated, the graph becomes deallocated as well. This allows for a temporary matrix to be created that is similar to other Graphs but does not need to be imported into the GraphManager.
Added overloaded operators for linear algebra operations. Vector and maps can now be multiplied with Graph references. All multiplication is assumed to be dot products. Ordering implies whether the vector or map is a column or row structure. The same goes for the Transpose of a Graph. Two graph references can also be multiplied with the return being a Temporary_Graph. Because of copying it is always more effcient for both speed and memory usage to use iterators to do the linear algebra rather than these operations.
Removed the reliance of Social Media models on the TRUST models. These models instead check for the knowledge trust network during initialization to check whether it should be active.
Moved the Output methods to their headers and made them publicly available.
Fixed a minor bug in Graph::get_data_state that was causing lines to be repeated.
Graph::get_data_state no longer uses std::endl. This will instead rely on the system buffer definitions optimizing writing perfomance to either the console or writing to file.
Added a system such that attritbutes can be added to nodes when outputting a dynetml file. To access this functionality, a new class should be created that inherits from Output_dynetml. The new class's constructor should then search construct for where these dynamic attributes are located. The attributes should be in the form of a vector<dynet::ParameterMap> and most likely should be held in a Model.
Added a new Output that will create jsons of similiar format to the Twitter_v2 format for Social Media events.
Moved the model library out of the exe and into the API. Does not affect the exe when running without an imported library. This allows developers to modify some of the functions and definitions for the Construct models. This also allows the create_custom_media_user* functions to longer require export as the relevant components are imported when building the associated Social_Media models.
To assist in the change in organization, the Construct header has had all models and outputs removed from it. The outputs have been added to a seperate header file "Output.h". This will make it easier to find and edit the output routines should developers be interested. Each model has been moved to its own header file in include/Construct_Models.
dynet::create_custom_media_user_no_followers and dynet::create_custom_media_user_with_followers has been replaced by dynet::load_users with an overload for each Social_Media class. These functions no longer need export and instead define the behavior of each models load_users virtual function.
Fixed a bug where not all deltas were being applied when using Graph::push_deltas.